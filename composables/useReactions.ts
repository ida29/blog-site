export const useReactions = () => {
  const { $supabase } = useNuxtApp()

  // Âà©Áî®ÂèØËÉΩ„Å™ÁµµÊñáÂ≠ó„ÅÆÂÆöÁæ©
  const reactionTypes = [
    { emoji: '‚ù§Ô∏è', name: 'love', label: 'Á¥†Êô¥„Çâ„Åó„ÅÑ' },
    { emoji: 'üëç', name: 'like', label: '„ÅÑ„ÅÑ„Å≠' },
    { emoji: 'üòÑ', name: 'laugh', label: 'Èù¢ÁôΩ„ÅÑ' },
    { emoji: 'ü§î', name: 'think', label: 'ËÄÉ„Åà„Åï„Åõ„Çâ„Çå„Çã' },
    { emoji: 'üî•', name: 'fire', label: 'ÁÜ±„ÅÑ' }
  ]

  // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíÂèñÂæó
  const getReactions = (articleId: string | number) => {
    // localStorage only (Supabase integration can be added later)
    if (process.client) {
      const reactions = localStorage.getItem(`reactions_${articleId}`)
      return reactions ? JSON.parse(reactions) : {}
    }
    return {}
  }

  // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí‰øùÂ≠ò
  const saveReactions = (articleId: string | number, reactions: Record<string, number>) => {
    if (process.client) {
      localStorage.setItem(`reactions_${articleId}`, JSON.stringify(reactions))
    }
  }

  // „É¶„Éº„Ç∂„Éº„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Â±•Ê≠¥„ÇíÂèñÂæó
  const getUserReactions = (articleId: string | number) => {
    if (process.client) {
      const userReactions = localStorage.getItem(`user_reactions_${articleId}`)
      return userReactions ? JSON.parse(userReactions) : []
    }
    return []
  }

  // „É¶„Éº„Ç∂„Éº„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Â±•Ê≠¥„Çí‰øùÂ≠ò
  const saveUserReactions = (articleId: string | number, userReactions: string[]) => {
    if (process.client) {
      localStorage.setItem(`user_reactions_${articleId}`, JSON.stringify(userReactions))
    }
  }

  // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†
  const addReaction = (articleId: string | number, reactionName: string) => {
    const reactions = getReactions(articleId)
    const userReactions = getUserReactions(articleId)

    // „É¶„Éº„Ç∂„Éº„ÅåÊó¢„Å´„Åì„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (userReactions.includes(reactionName)) {
      return false // Êó¢„Å´„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Ê∏à„Åø
    }

    // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Ç´„Ç¶„É≥„Éà„ÇíÂ¢óÂä†
    reactions[reactionName] = (reactions[reactionName] || 0) + 1
    
    // „É¶„Éº„Ç∂„Éº„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Â±•Ê≠¥„Å´ËøΩÂä†
    userReactions.push(reactionName)

    // ‰øùÂ≠ò
    saveReactions(articleId, reactions)
    saveUserReactions(articleId, userReactions)

    return true
  }

  // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂâäÈô§
  const removeReaction = (articleId: string | number, reactionName: string) => {
    const reactions = getReactions(articleId)
    const userReactions = getUserReactions(articleId)

    // „É¶„Éº„Ç∂„Éº„Åå„Åì„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const reactionIndex = userReactions.indexOf(reactionName)
    if (reactionIndex === -1) {
      return false // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Åó„Å¶„ÅÑ„Å™„ÅÑ
    }

    // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Ç´„Ç¶„É≥„Éà„ÇíÊ∏õÂ∞ë
    if (reactions[reactionName] && reactions[reactionName] > 0) {
      reactions[reactionName] -= 1
      if (reactions[reactionName] === 0) {
        delete reactions[reactionName]
      }
    }

    // „É¶„Éº„Ç∂„Éº„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Â±•Ê≠¥„Åã„ÇâÂâäÈô§
    userReactions.splice(reactionIndex, 1)

    // ‰øùÂ≠ò
    saveReactions(articleId, reactions)
    saveUserReactions(articleId, userReactions)

    return true
  }

  // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„Éà„Ç∞„É´
  const toggleReaction = (articleId: string | number, reactionName: string) => {
    const userReactions = getUserReactions(articleId)
    
    if (userReactions.includes(reactionName)) {
      return removeReaction(articleId, reactionName)
    } else {
      return addReaction(articleId, reactionName)
    }
  }

  // Á∑è„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Êï∞„ÇíÂèñÂæó
  const getTotalReactions = (articleId: string | number) => {
    const reactions = getReactions(articleId)
    return Object.values(reactions).reduce((sum: number, count: number) => sum + count, 0)
  }

  // „É¶„Éº„Ç∂„Éº„Åå„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  const hasUserReacted = (articleId: string | number, reactionName: string) => {
    const userReactions = getUserReactions(articleId)
    return userReactions.includes(reactionName)
  }

  return {
    reactionTypes,
    getReactions,
    addReaction,
    removeReaction,
    toggleReaction,
    getTotalReactions,
    hasUserReacted,
    getUserReactions
  }
}